library(rstanarm)
q()
n
colnames(df)
precis(model)
pairs(model)
plot(model)
min(df$dropout_c)
max(df$dropout_c)
min(df$n_layers_c)
max(df$n_layers_c)
colnames(df)
as.integer(df$bidirectional)
1 - as.integer(df$bidirectional)
as.integer(df$bidirectional) - 1
q()
n
head(regr$data)
head(regr$data)
summary(model)
plot(model)
marginal_effects(model)
marginal_effects(model)
summary(model)
summary(model)
marginal_effects(model)
colnames(df)
summary(model)
summary(model)
summary(model)
summary(model)
marginal_effects(model)
q()
n
compare(m1, m2)
plot(coeftab(m1, m2, m3, m4))
precis(m2)
q()
n
head(regr$data)
summary(regr$data)
colnames(regr$data)
q()
n
q()
n
precis(m3)
plot(m3)
plot(coeftab(m1, m2, m3, m4))
q()
n
plot(m1)
min(regr$dropout)
min(regr$data$dropout)
min(regr$data$hid_dim)
waic(m1, m2)
marginal_effects(m2)
marginal_effects(m3)
colnames(df)
q()
n
min(df$dropout)
max(df$dropout)
max(df$dropout)
min(df$dropout)
mean(df$score)
min(df$dropout)
min(df$hid_dim)
min(df$hid_dim)
max(df$hid_dim)
precis(m2)
summary(df$hid_dim)
q()
n
post <- extract.samples(m1)
dens(post$bD)
pairs(m1)
install.packages("jsonlite")
library(jsonlite)
df = jsonlite::stream_in("../log/cFS-lstm-3.jsonl")
df = jsonlite::stream_in(file("../log/cFS-lstm-3.jsonl"))
head(df)
?stream_in
df = jsonlite::stream_in(file("../log/cFS-lstm-3.jsonl"), prefix="")
?stream_in
colnames(df)
df = jsonlite::stream_in(file("../log/cFS-lstm-3.jsonl"), prefix="")
df = jsonlite::stream_in(file("../log/cFS-lstm-3.jsonl"))
colnames(df)
df$params
df$params$avg_pooling
read_log("../log/cFS-lstm-3.jsonl")
df = read_log("../log/cFS-lstm-3.jsonl")
head(df)
df = read_log("../log/cFS-lstm-3.jsonl")
df[parameters]
df[parameters,]
df[,parameters]
df[, c("example_type", "model")]
df = read_log("../log/cFS-lstm-3.jsonl")
head(df)
df = read_log("../log/cFS-lstm-3.jsonl")
head(df)
as.integer(df$bidirectional)
head(df)
dens(df$dropout_s)
plot(dens(df$dropout_s))
par(mfrow=c(1, 1))
dens(df$dropout_s)
dens(df$dropout)
)
head(df)
head(df)
compare(m1, m2)
compare(m1, m2, m3)
compare(m1, m2, m3, m4)
precis(m4)
compare(m1, m2, m3, m4)
plot(compare(m1, m2, m3, m4))
plot(compare(m1, m2, m3, m4), xlim=c(-500, -450))
plot(compare(m1, m2, m3, m4), xlim=c(-600, -400))
library(ggeffects)
ggpredict(m5)
ggpredict(m5$fit)
ggpredict(m5["fit"])
m5
library(rstanarm)
m = stan_glm(score ~ example_type, data = df)
summary(m)
m = stan_lm(score ~ example_type, data = df)
m = stan_lm(score ~ example_type, data = df, family="gaussian")
head(df)
m = stan_lm(score ~ example_type, data = df, family=gaussian())
m = stan_glm(score ~ example_type, data = df, family=gaussian())
summary(m)
dat = ggpredict(m)
plot(dat)
library(brms)
m = brm(score ~ as.factor(example_type), data = df, family="gaussian")
marginal_effects(m)
df$example_type = as.factor(df$example_type)
m = brm(score ~ example_type, data = df, family="gaussian")
marginal_effects(m)
m = brm(score ~ example_type + cell, data = df, family="gaussian")
marginal_effects(m)
m = brm(score ~ example_type * cell, data = df, family="gaussian")
marginal_effects(m)
marginal_effects(m_weight)
head(df)
sort(df$score)
df[order(score),]
df[order(df$score),]
head(df[order(df$score),])
head(df[order(-df$score),])
head(df[order(-df$score),], 10)
marginal_effects(m_lr)
marginal_effects(m_lr)
head(df)
head(df[order(-df$score),], 10)
head(df[order(-df$score),], 20)
library(partykit)
library(party)
library(randomForest)
rf <- randomForest(score ~ example_type + n_classes + n_samples, data=df)
rf
rf <- randomForest(score ~ example_type + n_classes + n_samples, data=df, importance = T)
rf
plot(rf)
imporance(rf)
importance(rf)
library(caret)
varImp(rf)
plot(varImp(rf))
plot(varImp(rf))
varImpPlot(rf, type=2)
rf <- randomForest(score ~ example_type + n_classes + n_samples + cell + emb_dim + hid_dim + bidirectional + n_layers + forget_bias + dropout + cutoff_cosine + margin + weight + lr, data=df, importance = T)
varImpPlot(rf, type=2)
rf <- randomForest(score ~ example_type + n_classes + n_samples + cell + emb_dim + hid_dim + bidirectional + n_layers + forget_bias + dropout_s + cutoff_cosine + margin_s + weight_s + lr_s, data=df, importance = T)
varImpPlot(rf, type=2)
rf <- randomForest(score ~ example_type + n_classes + n_samples + cell + emb_dim + hid_dim + bidirectional + n_layers + forget_bias + dropout_s + cutoff_cosine + margin_s + weight_s + lr_s, data=df, importance = T)
varImpPlot(rf, type=2)
 m <- stan_glm(score ~ margin, data=df, family=gaussian())
m
summary(m)
dat <- ggpredict(m)
plot(dat)
varImpPlot(rf, type=2)
dens(extract.samples(m_cell)["bC"])
varImpPlot(rf, type=2)
plot(models.compare)
varImpPlot(rf, type=2)
m <- stan_glm(score ~ example_type * (cell + margin_s + dropout_s + n_layers_s), family=gaussian())
m <- stan_glm(score ~ example_type * (cell + margin_s + dropout_s + n_layers_s), data=df, family=gaussian())
summary(m)
dat <- ggpredict(m)
plot(dat)
library(sjPlot)
plot_model(m, terms=c("example_type", "margin_s"))
plot_model(m, type="eff", terms=c("example_type", "margin_s"))
plot_model(m, type="pred", terms=c("example_type", "margin_s"))
df$example_type
df[, c("example_type", "margin")]
plot(score ~ margin_s + example_type, data=df)
plot(dat, wait=T)
par(mfrow=c(2, 3))
plot(dat, wait=T)
plot_model(m, type="eff", terms=c("example_type", "margin_s"))
plot_model(m, type="pred", terms=c("example_type", "margin_s"))
glm(score ~ example_type * (cell + margin_s, weight_s, dropout_s, n_layers_s), data=df)
glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s), data=df)
summary(glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s), data=df))
summary(glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine), data=df))
summary(glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s) * cutoff_cosine, data=df))
anova
anova(m)
m <- glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s) * cutoff_cosine, data=df)
anova(m)
Anova(m)
sjPlot(m)
plot_model(m)
m <- glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s), data=df)
summary(m)
plot_model(m, type="pred", terms=c("hid_dim_s", "example_type"))
plot_model(m, type="pred", terms=c("hid_dim_s", "cutoff_cosine"))
plot_model(m, type="pred", terms=c("example_type", "cutoff_cosine"))
colnames(df)
m <- glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s, rnn_dropout_s), data=df)
m <- glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s), data=df)
summary(m)
m <- glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s), data=df)
summary(m)
plot_model(m, type="pred", terms=c("example_type", "cutoff_cosine"))
m <- glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s), data=df)
plot_model(m, type="pred", terms=c("example_type", "cutoff_cosine"))
plot_model(m, type="pred", terms=c("example_type", "cutoff_cosine", "margin_s"))
plot_model(m, type="pred", terms=c("example_type", "cutoff_cosine", "hid_dim_s"))
plot_model(m, type="pred", terms=c("example_type", "cutoff_cosine", "hid_dim_s"))
m <- glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s), data=df)
plot_model(m, type="pred", terms=c("example_type", "cutoff_cosine", "hid_dim_s"))
m <- glm(score ~ example_type * (cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional), data=df)
summary(m)
plot_model(m, type="pred", terms=c("example_type", "cutoff_cosine", "bidirectional"))
m <- glm(score ~ example_type * cell * (margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional), data=df)
summary(m)
rf <- randomForest(score ~ example_type + cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional, data=df, ntree = 500, importance=T)
imp <- importance(rf, type=1, scale = F)
plot(imp)
imp
rf <- randomForest(score ~ cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional, data=df[df$example_type == 1,], ntree = 500, importance=T)
imp <- importance(rf, type=1, scale = F)
imp
varImpPlot(rf, type=1, scale=F)
rf <- randomForest(score ~ cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional, data=df[df$example_type == 0,], ntree = 500, importance=T)
rf_pair <- randomForest(score ~ cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional, data=df[df$example_type == 0,], ntree = 500, importance=T)
rf_triplet <- randomForest(score ~ cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional, data=df[df$example_type == 1,], ntree = 500, importance=T)
par(mfrow=c(1, 2))
varImpPlot(rf_pair, type=1, scale=F)
varImpPlot(rf_triplet, type=1, scale=F)
m_triplet <- lm(score ~ cell + margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional, data=df[df$example_type == 1,])
summary(m_triplet)
plot_model(m_triplet, type="pred", terms=c("margin_s"))
m_triplet <- lm(score ~ cell * (margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional), data=df[df$example_type == 1,])
summary(m_triplet)
df$margin
dens(df$margin)
plot(df$margin, df$score)
ggplot(df, aes(x=margin, y=score, colour=example_type)) + geom_point()
ggplot(df, aes(x=margin, y=score, colour=example_type)) + geom_point() + geom_smooth()
dat = ggpredict(m, terms=c("margin", "example_type"))
dat = ggpredict(m, terms=c("margin_s", "example_type"))
plot(dat)
summary(m)
m <- glm(score ~ example_type + (cell * margin_s + weight_s + dropout_s + n_layers_s + cutoff_cosine + hid_dim_s + rnn_dropout_s + forget_bias + bidirectional), data=df)
dat = ggpredict(m, terms=c("margin_s", "example_type"))
ggpredict::plot
ggeffect::plot
ggeffect
plot(dat)
m <- glm(score ~ example_type * (cell + margin_s + bidirectional), data=df)
summary(m)
plot_model(m)
m <- glm(score ~ example_type * cell * (margin_s + bidirectional), data=df)
dat = ggpredict(m, terms=c("margin_s", "example_type", "cell"))
plot(dat)
min(df$margin)
m <- glm(score ~ example_type * (cell + margin_s + bidirectional), data=df)
m <- glm(score ~ example_type * (cell + margin_s + bidirectional + emb_dim_s), data=df)
summary(m)
m <- glm(score ~ example_type * (cell + margin_s + bidirectional + n_layers_s), data=df)
summary(m)
m <- glm(score ~ example_type * (cell + margin_s + bidirectional + cutoff_cosine), data=df)
summary(m)
dat = ggpredict(m, terms=c("margin_s", "example_type", "cutoff_cosine"))
plot(dat)
m <- glm(score ~ example_type * (cell + margin_s + bidirectional + cutoff_cosine + negative_pair_selector), data=df)
summary(m)
dat = ggpredict(m, terms=c("margin_s", "example_type", "negative_pair_selector"))
plot(dat)
head(df[order(-df$score),], 20)
summary(glm(score ~ example_type * weight, data=df))
summary(glm(score ~ example_type * margin, data=df))
summary(glm(score ~ example_type * margin * bidirectional, data=df))
summary(glm(score ~ example_type * margin + bidirectional, data=df))
summary(glm(score ~ example_type * margin + dropout, data=df))
summary(glm(score ~ example_type * margin * dropout, data=df))
summary(glm(score ~ example_type * margin + bidirectional + dropout, data=df))
summary(glm(score ~ example_type * (margin + bidirectional + dropout), data=df))
summary(glm(score ~ example_type * margin (bidirectional + dropout), data=df))
summary(glm(score ~ example_type * margin + bidirectional + dropout, data=df))
summary(glm(score ~ example_type * margin_s + bidirectional + dropout_s, data=df))
summary(glm(score ~ example_type * margin_s + bidirectional + rnn_dropout_s, data=df))
summary(glm(score ~ example_type * margin_s + bidirectional + hid_dim, data=df))
summary(glm(score ~ example_type * margin_s + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * margin_s + bidirectional + hid_dim_s + emb_dim, data=df))
summary(glm(score ~ example_type * margin_s + bidirectional + hid_dim_s + cutoff_cosine, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine) + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine + weight) + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine) + cell + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine) + (n_samples * n_classes) + cell + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine) + n_layers + cell + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine) + n_layers_s + cell + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine + n_layers_s) + cell + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine) + cell + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine + dropout_s) + cell + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine) + dropout_s + cell + bidirectional + hid_dim_s, data=df))
summary(glm(score ~ example_type * (margin_s + cutoff_cosine + negative_pair_selector) + cell + bidirectional + hid_dim_s, data=df))
m_all
precis(m_all)
compare(m_full, m_min_hid)
plot(precis(m_full))
marginal_effects(m_full)
marginal_effects(m_full)
marginal_effects(m_full, points = T,
     point_args = c(alpha = 2/3, size = 1))
plot(margin_effects(m_full, effects = "example_type:margin_s"), points=T)
plot(marginal_effects(m_full, effects = "example_type:margin_s"), points=T)
plot(marginal_effects(m_full, effects = c("example_type")), points=T)
plot(marginal_effects(m_full, effects = c("example_type", "margin_s")), points=T)
plot(marginal_effects(m_full, effects = c("margin_s"), n_samples=1000), points=T)
dat = ggpredict(m_full, terms=c("example_type", "margin_s"))
plot(dat, rawdata=T)
dat = ggpredict(m_full, terms=c("example_type", "margin_s"), full.data = TRUE)
plot(dat, rawdata=T)
dat = ggpredict(m_full, terms=c("margin_s"), full.data = TRUE)
plot(dat, rawdata=T)
min(df$margin_s)
max(df$margin_s)
m <- brms(score ~ margin_s, family="gaussian")
m <- brm(score ~ margin_s, family="gaussian")
m <- brm(score ~ margin_s, data=df, family="gaussian")
plot(margin_effects(m), points=T)
plot(marginal_effects(m), points=T)
plot(marginal_effects(m, "margin_s:example_type"), points=T)
m <- brm(score ~ example_type * margin_s, data=df, family="gaussian")
plot(marginal_effects(m, "margin_s:example_type"), points=T)
plot(marginal_effects(m, "margin_s:example_type"), points=T, point_args = c(alpha = 2/3, size = 1))
summary(m)
plot(marginal_effects(m, "margin_s:example_type"), points=T, point_args = c(alpha = 2/3, size = 1))
m <- brm(score ~ example_type * hid_dim_s, data=df, family="gaussian")
plot(marginal_effects(m, "hid_dim_s:example_type"), points=T, point_args = c(alpha = 2/3, size = 1))
plot(marginal_effects(m, "margin_s:example_type"), points=T, point_args = c(alpha = 2/3, size = 1))
plot(marginal_effects(m), points=T, point_args = c(alpha = 2/3, size = 1))
plot(marginal_effects(m, "margin_s:example_type", method = "predict"), points=T, point_args = c(alpha = 2/3, size = 1))
plot(marginal_effects(m, "example_type:margin_s", method = "predict"), points=T, point_args = c(alpha = 2/3, size = 1))
plot(marginal_effects(m, "example_type:margin_s", int_conditions = ic <- 
  list(bidirectional = c(0, 1))), points=T, point_args = c(alpha = 2/3, size = 1))
summary(m)
samples = posterior_samples(m)
dens(samples$b_Intercept)
dens(samples$b_Intercept + samples$b_example_type1)
dens(samples$b_Intercept)
dens(samples$b_Intercept)
dens(samples$b_Intercept + samples$b_example_type1, add=T)
density(samples$b_Intercept, col="blue")
plot(density(samples$b_Intercept), col="blue")
lines(density(samples$b_Intercept + samples$b_example_type1), col="red")
plot(density(samples$b_Intercept + samples$b_example_type1), col="red")
plot(density(samples$b_Intercept), col="blue", xlim=(0.55, 0.7))
plot(density(samples$b_Intercept), col="blue", xlim=c(0.55, 0.7))
lines(density(samples$b_Intercept + samples$b_example_type1), col="red")
head(df)
df[order(-df$score), ]
head(df[order(-df$score), ])
lines(density(samples$b_Intercept + samples$b_bidirectional1), col="red")
lines(density(samples$b_Intercept + samples$b_bidirectional1 + samples$b_hid_dim_s), col="green")
plot(density(samples$b_Intercept + samples$b_example_type1 + samples$b_bidirectional1 + samples$b_hid_dim_s), col="blue", xlim=c(0.55, 0.75))
summary(m)
summary(m)
head(df)
get_prior(m)
prior_summary(m)
sims <- seq(-1, 1, length.out=1000)
pos <- 0.5 * (1 - sims)^2
neg_soft <- (0.4 - (1 - sims))^2
neg_soft[neg_soft < 0] = 0
plot(sims, pos)
lines(sims, neg_soft)
pos <- 0.25 * (1 - sims)^2
pos
plot(sims, pos)
plot(sims, pos, type="l")
neg_soft <- (1 - (1 - sims))^2
neg_soft[neg_soft < 0] = 0
lines(sims, neg_soft, col="blue")
neg_soft <- (1 - (1 - sims))^2
neg_soft[neg_soft <= 0] = 0
lines(sims, neg_soft, col="green")
neg_soft
neg_soft <- (1 - (1 - sims))^2
lines(sims, neg_soft, col="red")
neg_soft < 0
neg_soft <= 0
min(neg_soft)
neg_soft <- (1 - (1 - sims))
neg_soft[neg_soft < 0] = 0
neg_soft <- neg_soft^2
lines(sims, neg_soft, col="purple")
neg_hard <- (sims^2) * (sims > margin)
sims
(sims > margin)
margin
margin <- 1
(sims > margin)
neg_hard <- (sims^2) * (sims > margin)
plot(sims, pos, type="l")
lines(sims, neg_soft)
lines(sims, neg_hard)
neg_hard <- (sims^2) * as.integer(sims > margin)
neg_hard
neg_hard <- (sims^2) * as.float(sims > margin)
legend(1, 95, legend=c("Positive loss", "Soft Negative Loss", "Hard Negative Loss"),
       col=c(black, purple, blue), lty=1:2, cex=0.8)
legend(0.5, 1, legend=c("Positive loss", "Soft Negative Loss", "Hard Negative Loss"),
       col=c(black, purple, blue), lty=1:2, cex=0.8)
legend(x=0, 1.2, legend=c("Positive loss", "Soft Negative Loss", "Hard Negative Loss"),
       col=c(black, purple, blue), lw=2, lty=1, cex=1)
legend(x=0, 1.2, legend=c("Positive loss", "Soft Negative Loss", "Hard Negative Loss"),
       col=c(black, purple, blue), lw=2, lty=1, cex=1)
legend(x=0, 1.2, legend=c("Positive loss", "Soft Negative Loss", "Hard Negative Loss"),
       col=c(black, purple, blue), lw=2, lty=1, cex=1)
legend(x=-1, 1.15, legend=c("Positive loss", "Soft Negative Loss", "Hard Negative Loss"),
       col=c(black, purple, blue), lwd=2, lty=1, cex=0.8, ncol=3, bty = "n")
legend(x=-1, 1.15, legend=c("Positive loss", "Soft Negative Loss", "Hard Negative Loss"),
       col=c(black, purple, blue), lwd=2, lty=1, cex=0.8, ncol=3, bty = "n")
legend(x=-1, 1.15, legend=c("Positive loss", "Soft Negative Loss", "Hard Negative Loss"),
       col=c(black, purple, blue), lwd=2, lty=1, cex=0.8, ncol=3, bty = "n")
getwd()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
summary(m)
df$cell <- as.factor(df$cell)
summary(m)
summary(m)
df$cell <- as.factor(df$cell)
summary(m)
q()
n
